{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useContext } from 'react';\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UserContext from \"../context/auth/UserContext\";\nimport { resetPassword } from \"../middlewares/resetPassword\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChangePassword = function ChangePassword() {\n  var userContext = useContext(UserContext);\n  var user = userContext.user;\n  var _useState = useState({\n      password: '',\n      confirmPassword: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    Credential = _useState2[0],\n    setCredential = _useState2[1];\n  var handleResetPassword = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        if (Credential.password === '' || Credential.confirmPassword === '') {\n          alert('Please fill in all fields');\n        } else if (Credential.password !== Credential.confirmPassword) {\n          alert('New password and confirm password do not match');\n        } else {\n          yield resetPassword({\n            id: user.id,\n            password: Credential.password\n          });\n        }\n      } catch (error) {\n        alert(error);\n      }\n    });\n    return function handleResetPassword() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsxs(View, {\n        style: styles.inputView,\n        children: [_jsx(Text, {\n          children: \" New Password \"\n        }), _jsx(TextInput, {\n          style: styles.TextInput,\n          placeholder: \"New Password\",\n          placeholderTextColor: \"grey\",\n          secureTextEntry: true,\n          onChangeText: function onChangeText(password) {\n            return setCredential(_objectSpread(_objectSpread({}, Credential), {}, {\n              password: password\n            }));\n          }\n        })]\n      }), _jsxs(View, {\n        style: styles.inputView,\n        children: [_jsx(Text, {\n          children: \" Confirm Password \"\n        }), _jsx(TextInput, {\n          style: styles.TextInput,\n          placeholder: \"Confirm Password\",\n          placeholderTextColor: \"grey\",\n          secureTextEntry: true,\n          onChangeText: function onChangeText(confirmPassword) {\n            return setCredential(_objectSpread(_objectSpread({}, Credential), {}, {\n              confirmPassword: confirmPassword\n            }));\n          }\n        })]\n      }), _jsx(Pressable, {\n        style: function style(_ref2) {\n          var pressed = _ref2.pressed;\n          return [styles.passButton, pressed && {\n            backgroundColor: 'rgb(247, 124, 67)'\n          }];\n        },\n        onPress: handleResetPassword,\n        TouchableHighlight: true,\n        children: _jsx(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Reset Password \"\n          })\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%',\n    flex: 1,\n    backgroundColor: 'whitesmoke',\n    alignItems: 'center'\n  },\n  inputContainer: {\n    width: '100%',\n    height: 'auto',\n    marginTop: 60,\n    alignItems: 'center'\n  },\n  inputView: {\n    width: \"90%\",\n    height: 'auto'\n  },\n  TextInput: {\n    width: \"100%\",\n    height: 45,\n    padding: 10,\n    color: 'black',\n    backgroundColor: \"white\",\n    borderWidth: 1,\n    borderColor: 'rgb(247, 124, 67)',\n    borderRadius: 10,\n    marginBottom: 20,\n    marginTop: 5,\n    fontFamily: 'Poppins_400Regular'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontFamily: 'Poppins_500Medium',\n    marginTop: 2\n  },\n  passButton: {\n    width: '90%',\n    height: 45,\n    backgroundColor: 'rgb(247, 124, 67)',\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 20,\n    marginBottom: 10\n  }\n});\nexport default ChangePassword;","map":{"version":3,"names":["React","useState","useContext","Pressable","StyleSheet","Text","View","TextInput","UserContext","resetPassword","jsx","_jsx","jsxs","_jsxs","ChangePassword","userContext","user","_useState","password","confirmPassword","_useState2","_slicedToArray","Credential","setCredential","handleResetPassword","_ref","_asyncToGenerator","alert","id","error","apply","arguments","style","styles","container","children","inputContainer","inputView","placeholder","placeholderTextColor","secureTextEntry","onChangeText","_objectSpread","_ref2","pressed","passButton","backgroundColor","onPress","TouchableHighlight","flexDirection","alignItems","buttonText","create","width","height","flex","marginTop","padding","color","borderWidth","borderColor","borderRadius","marginBottom","fontFamily","fontSize","justifyContent"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/screens/ChangePassword.js"],"sourcesContent":["import React, {useState, useContext } from 'react'\r\nimport {Pressable, StyleSheet,Text, View} from 'react-native'\r\nimport { TextInput } from 'react-native'\r\nimport UserContext from '../context/auth/UserContext'\r\nimport {resetPassword} from '../middlewares/resetPassword'\r\nconst ChangePassword = () => {\r\n\r\n    const userContext = useContext(UserContext);\r\n    const { user } = userContext;\r\n    \r\n    const [Credential, setCredential] = useState({\r\n        password: '',\r\n        confirmPassword: '',\r\n    })\r\n\r\n    const handleResetPassword = async() => {\r\n\r\n        try {\r\n            if(Credential.password === '' || Credential.confirmPassword === ''){\r\n                alert('Please fill in all fields')\r\n            }\r\n            else if(Credential.password !== Credential.confirmPassword){\r\n                alert('New password and confirm password do not match')\r\n            }\r\n            else{\r\n               await resetPassword({id:user.id, password:Credential.password})\r\n\r\n            }\r\n            \r\n        } catch (error) {\r\n            alert(error);            \r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n\r\n            <View style={styles.inputContainer}>\r\n\r\n                <View style={styles.inputView}>\r\n                    <Text> New Password </Text>\r\n                    <TextInput\r\n                        style={styles.TextInput}\r\n                        placeholder=\"New Password\"\r\n                        placeholderTextColor=\"grey\"\r\n                        secureTextEntry={true}\r\n                        onChangeText={(password) => setCredential({...Credential, password})}\r\n                    />\r\n                </View>\r\n\r\n                <View style={styles.inputView}>\r\n                    <Text> Confirm Password </Text>\r\n                    <TextInput\r\n                        style={styles.TextInput}\r\n                        placeholder=\"Confirm Password\"\r\n                        placeholderTextColor=\"grey\"\r\n                        secureTextEntry={true}\r\n                        onChangeText={(confirmPassword) => setCredential({...Credential, confirmPassword})}\r\n                    />\r\n                </View>\r\n                \r\n                <Pressable \r\n                    style={({ pressed }) => [styles.passButton, pressed && { backgroundColor:'rgb(247, 124, 67)'}]}\r\n                    onPress={handleResetPassword}\r\n                    TouchableHighlight\r\n                    >\r\n                    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                        <Text style={styles.buttonText}>Reset Password </Text>\r\n                        {/* <FontAwesomeIcon icon={faRightFromBracket} size={16} color=\"white\" style={{marginLeft: 10}}/> */}\r\n                    </View>\r\n                </Pressable>\r\n\r\n\r\n            </View>    \r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({  \r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        flex: 1,\r\n        backgroundColor: 'whitesmoke',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '100%',\r\n        height: 'auto',\r\n        marginTop: 60,\r\n        alignItems: 'center',\r\n    },\r\n\r\n    inputView: {\r\n        width: \"90%\",\r\n        height: 'auto',\r\n    },\r\n\r\n    TextInput: {\r\n        width: \"100%\",\r\n        height: 45,\r\n        padding: 10,\r\n        color: 'black',\r\n        backgroundColor: \"white\",\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(247, 124, 67)',\r\n        borderRadius: 10,\r\n        marginBottom: 20,\r\n        marginTop: 5,\r\n        fontFamily: 'Poppins_400Regular',\r\n    },\r\n    \r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontFamily: 'Poppins_500Medium',\r\n    marginTop:2\r\n  },\r\n    passButton: {\r\n        width: '90%',\r\n        height: 45,\r\n        backgroundColor: 'rgb(247, 124, 67)',\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: 20,\r\n        marginBottom: 10,\r\n    },\r\n\r\n})\r\n\r\n\r\nexport default ChangePassword\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}