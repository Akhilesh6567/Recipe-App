{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nimport AnimatedValue from \"../nodes/AnimatedValue\";\nimport AnimatedValueXY from \"../nodes/AnimatedValueXY\";\nimport Animation from \"./Animation\";\nimport SpringConfig from \"../SpringConfig\";\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from \"../NativeAnimatedHelper\";\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\nvar SpringAnimation = function (_Animation) {\n  _inherits(SpringAnimation, _Animation);\n  function SpringAnimation(config) {\n    _classCallCheck(this, SpringAnimation);\n    var _this = _possibleConstructorReturn(this, _Animation.call(this));\n    _this._overshootClamping = withDefault(config.overshootClamping, false);\n    _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);\n    _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    _this._initialVelocity = withDefault(config.velocity, 0);\n    _this._lastVelocity = withDefault(config.velocity, 0);\n    _this._toValue = config.toValue;\n    _this._delay = withDefault(config.delay, 0);\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;\n    _this.__iterations = config.iterations !== undefined ? config.iterations : 1;\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = withDefault(config.stiffness, 100);\n      _this._damping = withDefault(config.damping, 10);\n      _this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n    invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(_this._damping > 0, 'Damping value must be greater than 0');\n    invariant(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n  SpringAnimation.prototype.__getNativeAnimationConfig = function __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  };\n  SpringAnimation.prototype.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    var _this2 = this;\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n    var start = function start() {\n      if (_this2._useNativeDriver) {\n        _this2.__startNativeAnimation(animatedValue);\n      } else {\n        _this2.onUpdate();\n      }\n    };\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  };\n  SpringAnimation.prototype.getInternalState = function getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  };\n  SpringAnimation.prototype.onUpdate = function onUpdate() {\n    var MAX_STEPS = 64;\n    var now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n    var zeta = c / (2 * Math.sqrt(k * m));\n    var omega0 = Math.sqrt(k / m);\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n    var x0 = this._toValue - this._startPosition;\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n    if (zeta < 1) {\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      var _envelope = Math.exp(-omega0 * t);\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n    this._onUpdate(position);\n    if (!this.__active) {\n      return;\n    }\n    var isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    var isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n      this.__debouncedOnEnd({\n        finished: true\n      });\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  };\n  SpringAnimation.prototype.stop = function stop() {\n    _Animation.prototype.stop.call(this);\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  };\n  return SpringAnimation;\n}(Animation);\nexport default SpringAnimation;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","AnimatedValue","AnimatedValueXY","Animation","SpringConfig","invariant","shouldUseNativeDriver","withDefault","defaultValue","undefined","SpringAnimation","_Animation","config","_this","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","_springConfig","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","_this2","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","_envelope","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/SpringAnimation.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport AnimatedValue from '../nodes/AnimatedValue';\nimport AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { shouldUseNativeDriver } from '../NativeAnimatedHelper';\n\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\n\nvar SpringAnimation = function (_Animation) {\n  _inherits(SpringAnimation, _Animation);\n\n  function SpringAnimation(config) {\n    _classCallCheck(this, SpringAnimation);\n\n    var _this = _possibleConstructorReturn(this, _Animation.call(this));\n\n    _this._overshootClamping = withDefault(config.overshootClamping, false);\n    _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);\n    _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    _this._initialVelocity = withDefault(config.velocity, 0);\n    _this._lastVelocity = withDefault(config.velocity, 0);\n    _this._toValue = config.toValue;\n    _this._delay = withDefault(config.delay, 0);\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;\n    _this.__iterations = config.iterations !== undefined ? config.iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = withDefault(config.stiffness, 100);\n      _this._damping = withDefault(config.damping, 10);\n      _this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n\n    invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(_this._damping > 0, 'Damping value must be greater than 0');\n    invariant(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n\n  SpringAnimation.prototype.__getNativeAnimationConfig = function __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),\n      toValue: this._toValue,\n      iterations: this.__iterations\n    };\n  };\n\n  SpringAnimation.prototype.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    var _this2 = this;\n\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      var internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    var start = function start() {\n      if (_this2._useNativeDriver) {\n        _this2.__startNativeAnimation(animatedValue);\n      } else {\n        _this2.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  };\n\n  SpringAnimation.prototype.getInternalState = function getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  };\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n\n\n  SpringAnimation.prototype.onUpdate = function onUpdate() {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    var MAX_STEPS = 64;\n    var now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    var deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    var c = this._damping;\n    var m = this._mass;\n    var k = this._stiffness;\n    var v0 = -this._initialVelocity;\n\n    var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    var position = 0.0;\n    var velocity = 0.0;\n    var t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      var envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      var _envelope = Math.exp(-omega0 * t);\n      position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    var isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    var isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({ finished: true });\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  };\n\n  SpringAnimation.prototype.stop = function stop() {\n    _Animation.prototype.stop.call(this);\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({ finished: false });\n  };\n\n  return SpringAnimation;\n}(Animation);\n\nexport default SpringAnimation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}