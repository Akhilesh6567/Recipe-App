{"ast":null,"code":"import createDOMProps from \"../createDOMProps\";\nimport findNodeHandle from \"../../exports/findNodeHandle\";\nimport styleResolver from \"../../exports/StyleSheet/styleResolver\";\nimport UIManager from \"../../exports/UIManager\";\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n    var node = findNodeHandle(this);\n    if (node) {\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;","map":{"version":3,"names":["createDOMProps","findNodeHandle","styleResolver","UIManager","NativeMethodsMixin","blur","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","node","domProps","style","resolveWithNode","updateView"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"sourcesContent":["/**\n * Copyright (c) 2016-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\n\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n    var node = findNodeHandle(this);\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\n\nexport default NativeMethodsMixin;"],"mappings":"AAUA,OAAOA,cAAc;AACrB,OAAOC,cAAc;AACrB,OAAOC,aAAa;AACpB,OAAOC,SAAS;AAEhB,IAAIC,kBAAkB,GAAG;EAIvBC,IAAI,EAAE,SAASA,IAAIA,CAAA,EAAG;IACpBF,SAAS,CAACE,IAAI,CAACJ,cAAc,CAAC,IAAI,CAAC,CAAC;EACtC,CAAC;EAODK,KAAK,EAAE,SAASA,KAAKA,CAAA,EAAG;IACtBH,SAAS,CAACG,KAAK,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;EACvC,CAAC;EAMDM,OAAO,EAAE,SAASA,OAAOA,CAACC,QAAQ,EAAE;IAClCL,SAAS,CAACI,OAAO,CAACN,cAAc,CAAC,IAAI,CAAC,EAAEO,QAAQ,CAAC;EACnD,CAAC;EAkBDC,eAAe,EAAE,SAASA,eAAeA,CAACD,QAAQ,EAAE;IAClDL,SAAS,CAACM,eAAe,CAACR,cAAc,CAAC,IAAI,CAAC,EAAEO,QAAQ,CAAC;EAC3D,CAAC;EAMDE,aAAa,EAAE,SAASA,aAAaA,CAACC,oBAAoB,EAAEC,SAAS,EAAEC,MAAM,EAAE;IAC7EV,SAAS,CAACO,aAAa,CAACT,cAAc,CAAC,IAAI,CAAC,EAAEU,oBAAoB,EAAEE,MAAM,EAAED,SAAS,CAAC;EACxF,CAAC;EASDE,cAAc,EAAE,SAASA,cAAcA,CAACC,WAAW,EAAE;IACnD,IAAI,CAACA,WAAW,EAAE;MAChB;IACF;IACA,IAAIC,IAAI,GAAGf,cAAc,CAAC,IAAI,CAAC;IAC/B,IAAIe,IAAI,EAAE;MAGR,IAAIC,QAAQ,GAAGjB,cAAc,CAAC,IAAI,EAAEe,WAAW,EAAE,UAAUG,KAAK,EAAE;QAChE,OAAOhB,aAAa,CAACiB,eAAe,CAACD,KAAK,EAAEF,IAAI,CAAC;MACnD,CAAC,CAAC;MACFb,SAAS,CAACiB,UAAU,CAACJ,IAAI,EAAEC,QAAQ,EAAE,IAAI,CAAC;IAC5C;EACF;AACF,CAAC;AAED,eAAeb,kBAAkB"},"metadata":{},"sourceType":"module"}