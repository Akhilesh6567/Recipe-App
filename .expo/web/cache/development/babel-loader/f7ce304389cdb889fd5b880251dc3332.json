{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nimport invariant from 'fbjs/lib/invariant';\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n  return EventSubscriptionVendor;\n}();\nexport default EventSubscriptionVendor;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","invariant","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","undefined","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/node_modules/react-native-web/dist/vendor/react-native/emitter/EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventSubscriptionVendor\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"],"mappings":"AASA,YAAY;;AAEZ,SAASA,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,OAAOC,SAAS,MAAM,oBAAoB;AAM1C,IAAIC,uBAAuB,GAAG,YAAY;EACxC,SAASA,uBAAuBA,CAAA,EAAG;IACjCL,eAAe,CAAC,IAAI,EAAEK,uBAAuB,CAAC;IAE9C,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACC,oBAAoB,GAAG,IAAI;EAClC;EAUAF,uBAAuB,CAACG,SAAS,CAACC,eAAe,GAAG,SAASA,eAAeA,CAACC,SAAS,EAAEC,YAAY,EAAE;IACpGP,SAAS,CAACO,YAAY,CAACC,UAAU,KAAK,IAAI,EAAE,wDAAwD,CAAC;IACrG,IAAI,CAAC,IAAI,CAACN,qBAAqB,CAACI,SAAS,CAAC,EAAE;MAC1C,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,GAAG,EAAE;IAC5C;IACA,IAAIG,GAAG,GAAG,IAAI,CAACP,qBAAqB,CAACI,SAAS,CAAC,CAACI,MAAM;IACtD,IAAI,CAACR,qBAAqB,CAACI,SAAS,CAAC,CAACK,IAAI,CAACJ,YAAY,CAAC;IACxDA,YAAY,CAACD,SAAS,GAAGA,SAAS;IAClCC,YAAY,CAACE,GAAG,GAAGA,GAAG;IACtB,OAAOF,YAAY;EACrB,CAAC;EAUDN,uBAAuB,CAACG,SAAS,CAACQ,sBAAsB,GAAG,SAASA,sBAAsBA,CAACN,SAAS,EAAE;IACpG,IAAIA,SAAS,KAAKO,SAAS,EAAE;MAC3B,IAAI,CAACX,qBAAqB,GAAG,CAAC,CAAC;IACjC,CAAC,MAAM;MACL,OAAO,IAAI,CAACA,qBAAqB,CAACI,SAAS,CAAC;IAC9C;EACF,CAAC;EAUDL,uBAAuB,CAACG,SAAS,CAACU,kBAAkB,GAAG,SAASA,kBAAkBA,CAACP,YAAY,EAAE;IAC/F,IAAID,SAAS,GAAGC,YAAY,CAACD,SAAS;IACtC,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAG;IAE1B,IAAIM,oBAAoB,GAAG,IAAI,CAACb,qBAAqB,CAACI,SAAS,CAAC;IAChE,IAAIS,oBAAoB,EAAE;MACxB,OAAOA,oBAAoB,CAACN,GAAG,CAAC;IAClC;EACF,CAAC;EAgBDR,uBAAuB,CAACG,SAAS,CAACY,uBAAuB,GAAG,SAASA,uBAAuBA,CAACV,SAAS,EAAE;IACtG,OAAO,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC;EAC9C,CAAC;EAED,OAAOL,uBAAuB;AAChC,CAAC,EAAE;AAEH,eAAeA,uBAAuB"},"metadata":{},"sourceType":"module"}