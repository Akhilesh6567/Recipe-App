{"ast":null,"code":"import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n  if (!connection) {\n    return result;\n  }\n  for (var prop in connection) {\n    var value = connection[prop];\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n};\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\nvar connectionListeners = [];\nvar netInfoListeners = [];\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n      wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n        onlineCallback = _connectionListeners$[1],\n        offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nexport default NetInfo;","map":{"version":3,"names":["ExecutionEnvironment","findIndex","invariant","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","getConnectionInfoObject","result","effectiveType","type","prop","value","eventTypesMap","change","connectionChange","eventTypes","Object","keys","connectionListeners","netInfoListeners","NetInfo","addEventListener","handler","indexOf","console","warn","error","remove","wrappedHandler","push","removeEventListener","listenerIndex","pair","_netInfoListeners$lis","splice","fetch","Promise","resolve","reject","err","getConnectionInfo","isConnected","onlineCallback","offlineCallback","_connectionListeners$","onLine"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/node_modules/react-native-web/dist/exports/NetInfo/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\n\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\n// Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n  if (!connection) {\n    return result;\n  }\n  for (var prop in connection) {\n    var value = connection[prop];\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n};\n\n// Map React Native events to browser equivalents\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\n\nvar connectionListeners = [];\nvar netInfoListeners = [];\n\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n\n\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n\n\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\n\nexport default NetInfo;"],"mappings":"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"},"metadata":{},"sourceType":"module"}