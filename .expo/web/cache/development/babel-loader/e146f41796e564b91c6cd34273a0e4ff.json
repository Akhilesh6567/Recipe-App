{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nimport EmitterSubscription from \"./EmitterSubscription\";\nimport EventSubscriptionVendor from \"./EventSubscriptionVendor\";\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n  return EventEmitter;\n}();\nexport default EventEmitter;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","EmitterSubscription","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","subscriber","_subscriber","prototype","addListener","eventType","listener","context","addSubscription","once","_this","_len","arguments","length","args","Array","_key","removeCurrentListener","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","emit","i","l","slice","call","removeListener","remove"],"sources":["C:/Users/ELITE BOOK/Desktop/Update/Recipe-App/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventEmitter\n * @noflow\n * @typecheck\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\n\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\nvar EventEmitter = function () {\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}